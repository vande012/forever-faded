{
  "version": 3,
  "sources": ["../../../@strapi/plugin-documentation/admin/src/utils/baseQuery.ts", "../../../@strapi/plugin-documentation/admin/src/components/SettingsForm.tsx", "../../../@strapi/plugin-documentation/admin/src/pages/Settings.tsx"],
  "sourcesContent": ["import { SerializedError } from '@reduxjs/toolkit';\nimport { type UnknownApiError, type ApiError } from '@strapi/strapi/admin';\n\ntype BaseQueryError = ApiError | UnknownApiError | SerializedError;\n\nconst isBaseQueryError = (error: BaseQueryError): error is ApiError | UnknownApiError => {\n  return error.name !== undefined;\n};\n\nexport { isBaseQueryError };\n", "import * as React from 'react';\n\nimport {\n  Box,\n  Button,\n  Flex,\n  Grid,\n  TextInput,\n  Toggle,\n  Typography,\n  Field,\n} from '@strapi/design-system';\n// Strapi Icons\nimport { Check, Eye as Show, EyeStriked as Hide } from '@strapi/icons';\nimport { translatedErrors, useRBAC, Layouts } from '@strapi/strapi/admin';\nimport { Form, Formik, FormikHelpers } from 'formik';\nimport { useIntl } from 'react-intl';\nimport { styled } from 'styled-components';\nimport * as yup from 'yup';\n\nimport { PERMISSIONS } from '../constants';\nimport { DocumentInfos, SettingsInput } from '../types';\nimport { getTrad } from '../utils';\n\nconst schema = yup.object().shape({\n  restrictedAccess: yup.boolean(),\n  password: yup.string().when('restrictedAccess', (value, initSchema) => {\n    return value\n      ? initSchema\n          .required(translatedErrors.required.id)\n          .min(8)\n          .matches(/[a-z]/, 'components.Input.error.contain.lowercase')\n          .matches(/[A-Z]/, 'components.Input.error.contain.uppercase')\n          .matches(/\\d/, 'components.Input.error.contain.number')\n      : initSchema;\n  }),\n});\n\nconst FieldActionWrapper = styled(Field.Action)`\n  svg {\n    height: 1.6rem;\n    width: 1.6rem;\n    path {\n      fill: ${({ theme }) => theme.colors.neutral600};\n    }\n  }\n`;\n\ntype SettingsFormProps = {\n  data?: DocumentInfos;\n  onSubmit: (body: SettingsInput, formik: FormikHelpers<SettingsInput>) => Promise<void>;\n};\n\nexport const SettingsForm = ({ data, onSubmit }: SettingsFormProps) => {\n  const { formatMessage } = useIntl();\n  const [passwordShown, setPasswordShown] = React.useState(false);\n  const { allowedActions } = useRBAC(PERMISSIONS);\n\n  return (\n    <Formik\n      enableReinitialize\n      initialValues={{\n        restrictedAccess: data?.documentationAccess.restrictedAccess || false,\n        password: '',\n      }}\n      onSubmit={onSubmit}\n      validationSchema={schema}\n    >\n      {({\n        handleSubmit,\n        values,\n        handleChange,\n        errors,\n        setFieldTouched,\n        setFieldValue,\n        setFieldError,\n        dirty,\n      }) => {\n        return (\n          <Form noValidate onSubmit={handleSubmit}>\n            <Layouts.Header\n              title={formatMessage({\n                id: getTrad('plugin.name'),\n                defaultMessage: 'Documentation',\n              })}\n              subtitle={formatMessage({\n                id: getTrad('pages.SettingsPage.header.description'),\n                defaultMessage: 'Configure the documentation plugin',\n              })}\n              primaryAction={\n                <Button\n                  type=\"submit\"\n                  startIcon={<Check />}\n                  disabled={!dirty && allowedActions.canUpdate}\n                >\n                  {formatMessage({\n                    id: getTrad('pages.SettingsPage.Button.save'),\n                    defaultMessage: 'Save',\n                  })}\n                </Button>\n              }\n            />\n            <Layouts.Content>\n              <Box\n                background=\"neutral0\"\n                hasRadius\n                shadow=\"filterShadow\"\n                paddingTop={6}\n                paddingBottom={6}\n                paddingLeft={7}\n                paddingRight={7}\n              >\n                <Flex direction=\"column\" alignItems=\"stretch\" gap={4}>\n                  <Typography variant=\"delta\" tag=\"h2\">\n                    {formatMessage({\n                      id: 'global.settings',\n                      defaultMessage: 'Settings',\n                    })}\n                  </Typography>\n                  <Grid.Root gap={4}>\n                    <Grid.Item col={6} s={12} direction=\"column\" alignItems=\"stretch\">\n                      <Field.Root\n                        name=\"restrictedAccess\"\n                        hint={formatMessage({\n                          id: getTrad('pages.SettingsPage.toggle.hint'),\n                          defaultMessage: 'Make the documentation endpoint private',\n                        })}\n                      >\n                        <Field.Label>\n                          {formatMessage({\n                            id: getTrad('pages.SettingsPage.toggle.label'),\n                            defaultMessage: 'Restricted Access',\n                          })}\n                        </Field.Label>\n                        <Toggle\n                          checked={values.restrictedAccess}\n                          onChange={() => {\n                            if (values.restrictedAccess === true) {\n                              setFieldValue('password', '', false);\n                              setFieldTouched('password', false, false);\n                              setFieldError('password', undefined);\n                            }\n\n                            setFieldValue('restrictedAccess', !values.restrictedAccess, false);\n                          }}\n                          onLabel=\"On\"\n                          offLabel=\"Off\"\n                        />\n                        <Field.Hint />\n                      </Field.Root>\n                    </Grid.Item>\n                    {values.restrictedAccess && (\n                      <Grid.Item col={6} s={12} direction=\"column\" alignItems=\"stretch\">\n                        <Field.Root\n                          name=\"password\"\n                          error={\n                            errors.password\n                              ? formatMessage({\n                                  id: errors.password,\n                                  defaultMessage: errors.password,\n                                })\n                              : undefined\n                          }\n                        >\n                          <Field.Label>\n                            {formatMessage({\n                              id: 'global.password',\n                              defaultMessage: 'Password',\n                            })}\n                          </Field.Label>\n                          <TextInput\n                            placeholder=\"**********\"\n                            type={passwordShown ? 'text' : 'password'}\n                            value={values.password}\n                            onChange={handleChange}\n                            endAction={\n                              <FieldActionWrapper\n                                onClick={(e) => {\n                                  e.stopPropagation();\n                                  setPasswordShown((prev) => !prev);\n                                }}\n                                label={formatMessage(\n                                  passwordShown\n                                    ? {\n                                        id: 'Auth.form.password.show-password',\n                                        defaultMessage: 'Show password',\n                                      }\n                                    : {\n                                        id: 'Auth.form.password.hide-password',\n                                        defaultMessage: 'Hide password',\n                                      }\n                                )}\n                              >\n                                {passwordShown ? <Show /> : <Hide />}\n                              </FieldActionWrapper>\n                            }\n                          />\n                          <Field.Error />\n                        </Field.Root>\n                      </Grid.Item>\n                    )}\n                  </Grid.Root>\n                </Flex>\n              </Box>\n            </Layouts.Content>\n          </Form>\n        );\n      }}\n    </Formik>\n  );\n};\n", "import * as React from 'react';\n\nimport { Main } from '@strapi/design-system';\nimport { useAPIErrorHandler, Page, useNotification } from '@strapi/strapi/admin';\nimport { FormikHelpers } from 'formik';\nimport { useIntl } from 'react-intl';\n\nimport { SettingsForm } from '../components/SettingsForm';\nimport { useGetInfoQuery, useUpdateSettingsMutation } from '../services/api';\nimport { getTrad, isBaseQueryError } from '../utils';\n\nimport type { SettingsInput } from '../types';\n\nconst SettingsPage = () => {\n  const { toggleNotification } = useNotification();\n  const { formatMessage } = useIntl();\n  const {\n    _unstableFormatAPIError: formatAPIError,\n    _unstableFormatValidationErrors: formatValidationErrors,\n  } = useAPIErrorHandler();\n  const { data, isError, isLoading, isFetching } = useGetInfoQuery();\n  const [updateSettings] = useUpdateSettingsMutation();\n\n  const onUpdateSettings = async (body: SettingsInput, formik: FormikHelpers<SettingsInput>) => {\n    return updateSettings({ body })\n      .unwrap()\n      .then(() => {\n        toggleNotification({\n          type: 'success',\n          message: formatMessage({\n            id: getTrad('notification.update.success'),\n            defaultMessage: 'Successfully updated settings',\n          }),\n        });\n      })\n      .catch((err) => {\n        if (isBaseQueryError(err) && err.name === 'ValidationError') {\n          toggleNotification({\n            type: 'danger',\n            message: formatAPIError(err),\n          });\n        }\n      });\n  };\n\n  if (isLoading || isFetching) {\n    return <Page.Loading />;\n  }\n\n  if (isError) {\n    return <Page.Error />;\n  }\n\n  return (\n    <Main>\n      <SettingsForm data={data} onSubmit={onUpdateSettings} />\n    </Main>\n  );\n};\n\nexport { SettingsPage };\n"],
  "mappings": "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",
  "names": ["isBaseQueryError", "error", "name", "undefined", "schema", "object", "shape", "restrictedAccess", "boolean", "password", "string", "when", "value", "initSchema", "required", "translatedErrors", "id", "min", "matches", "FieldActionWrapper", "styled", "Field", "Action", "theme", "colors", "neutral600", "SettingsForm", "data", "onSubmit", "formatMessage", "useIntl", "passwordShown", "setPasswordShown", "useState", "allowedActions", "useRBAC", "PERMISSIONS", "_jsx", "Formik", "enableReinitialize", "initialValues", "documentationAccess", "validationSchema", "handleSubmit", "values", "handleChange", "errors", "setFieldTouched", "setFieldValue", "setFieldError", "dirty", "_jsxs", "Form", "noValidate", "Layouts", "Header", "title", "getTrad", "defaultMessage", "subtitle", "primaryAction", "Button", "type", "startIcon", "Check", "disabled", "canUpdate", "Content", "Box", "background", "hasRadius", "shadow", "paddingTop", "paddingBottom", "paddingLeft", "paddingRight", "Flex", "direction", "alignItems", "gap", "Typography", "variant", "tag", "Grid", "Root", "Item", "col", "s", "hint", "Label", "Toggle", "checked", "onChange", "onLabel", "offLabel", "Hint", "TextInput", "placeholder", "endAction", "onClick", "e", "stopPropagation", "prev", "label", "Show", "Hide", "Error", "SettingsPage", "toggleNotification", "useNotification", "_unstableFormatAPIError", "formatAPIError", "_unstableFormatValidationErrors", "formatValidationErrors", "useAPIErrorHandler", "isError", "isLoading", "isFetching", "useGetInfoQuery", "updateSettings", "useUpdateSettingsMutation", "onUpdateSettings", "body", "formik", "unwrap", "then", "message", "catch", "err", "Page", "Loading", "Main"]
}
