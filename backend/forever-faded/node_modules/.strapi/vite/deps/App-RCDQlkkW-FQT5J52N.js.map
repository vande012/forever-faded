{
  "version": 3,
  "sources": ["../../../@strapi/plugin-documentation/admin/src/pages/App.tsx"],
  "sourcesContent": ["/* eslint-disable import/no-default-export */\nimport * as React from 'react';\n\nimport {\n  LinkButton,\n  Flex,\n  IconButton,\n  Table,\n  Tbody,\n  Td,\n  Th,\n  Thead,\n  Tr,\n  Typography,\n  EmptyStateLayout,\n  Dialog,\n} from '@strapi/design-system';\nimport { Eye as Show, ArrowClockwise as Reload, Trash } from '@strapi/icons';\nimport {\n  ConfirmDialog,\n  useRBAC,\n  Page,\n  useAPIErrorHandler,\n  useNotification,\n  Layouts,\n} from '@strapi/strapi/admin';\nimport { useIntl } from 'react-intl';\nimport { styled } from 'styled-components';\n\nimport { PERMISSIONS } from '../constants';\nimport {\n  useGetInfoQuery,\n  useRegenerateDocMutation,\n  useDeleteVersionMutation,\n} from '../services/api';\nimport { getTrad } from '../utils';\n\nconst App = () => {\n  const { formatMessage } = useIntl();\n  const { toggleNotification } = useNotification();\n  const { formatAPIError } = useAPIErrorHandler();\n  const { data, isLoading: isLoadingInfo, isError } = useGetInfoQuery();\n  const [regenerate] = useRegenerateDocMutation();\n  const [deleteVersion] = useDeleteVersionMutation();\n  const [showConfirmDelete, setShowConfirmDelete] = React.useState<boolean>(false);\n  const [versionToDelete, setVersionToDelete] = React.useState<string>();\n  const { allowedActions, isLoading: isLoadingRBAC } = useRBAC(PERMISSIONS);\n\n  const isLoading = isLoadingInfo || isLoadingRBAC;\n\n  const colCount = 4;\n  const rowCount = (data?.docVersions?.length || 0) + 1;\n\n  const handleRegenerateDoc = (version: string) => {\n    regenerate({ version })\n      .unwrap()\n      .then(() => {\n        toggleNotification({\n          type: 'success',\n          message: formatMessage({\n            id: getTrad('notification.generate.success'),\n            defaultMessage: 'Successfully generated documentation',\n          }),\n        });\n      })\n      .catch((err) => {\n        toggleNotification({\n          type: 'warning',\n          message: formatAPIError(err),\n        });\n      });\n  };\n\n  const handleShowConfirmDelete = () => {\n    setShowConfirmDelete(!showConfirmDelete);\n  };\n\n  const handleConfirmDelete = async () => {\n    if (!versionToDelete) {\n      // nothing to delete\n      return;\n    }\n\n    await deleteVersion({ version: versionToDelete })\n      .unwrap()\n      .then(() => {\n        toggleNotification({\n          type: 'success',\n          message: formatMessage({\n            id: getTrad('notification.delete.success'),\n            defaultMessage: 'Successfully deleted documentation',\n          }),\n        });\n      })\n      .catch((err) => {\n        toggleNotification({\n          type: 'warning',\n          message: formatAPIError(err),\n        });\n      });\n\n    setShowConfirmDelete(!showConfirmDelete);\n  };\n\n  const handleClickDelete = (version: string) => {\n    setVersionToDelete(version);\n    setShowConfirmDelete(!showConfirmDelete);\n  };\n\n  const title = formatMessage({\n    id: getTrad('plugin.name'),\n    defaultMessage: 'Documentation',\n  });\n\n  if (isLoading) {\n    return <Page.Loading />;\n  }\n\n  if (isError) {\n    return <Page.Error />;\n  }\n\n  return (\n    <Layouts.Root>\n      <Page.Title>{title}</Page.Title>\n      <Page.Main>\n        <Layouts.Header\n          title={title}\n          subtitle={formatMessage({\n            id: getTrad('pages.PluginPage.header.description'),\n            defaultMessage: 'Configure the documentation plugin',\n          })}\n          primaryAction={\n            <OpenDocLink\n              disabled={!allowedActions.canRead || !data?.currentVersion || !data?.prefix}\n              href={createDocumentationHref(`${data?.prefix}/v${data?.currentVersion}`)}\n              startIcon={<Show />}\n            >\n              {formatMessage({\n                id: getTrad('pages.PluginPage.Button.open'),\n                defaultMessage: 'Open Documentation',\n              })}\n            </OpenDocLink>\n          }\n        />\n        <Layouts.Content>\n          {data?.docVersions.length ? (\n            <Table colCount={colCount} rowCount={rowCount}>\n              <Thead>\n                <Tr>\n                  <Th>\n                    <Typography variant=\"sigma\" textColor=\"neutral600\">\n                      {formatMessage({\n                        id: getTrad('pages.PluginPage.table.version'),\n                        defaultMessage: 'Version',\n                      })}\n                    </Typography>\n                  </Th>\n                  <Th>\n                    <Typography variant=\"sigma\" textColor=\"neutral600\">\n                      {formatMessage({\n                        id: getTrad('pages.PluginPage.table.generated'),\n                        defaultMessage: 'Last Generated',\n                      })}\n                    </Typography>\n                  </Th>\n                </Tr>\n              </Thead>\n              <Tbody>\n                {data.docVersions\n                  .slice(0)\n                  .sort((a, b) => (a.generatedDate < b.generatedDate ? 1 : -1))\n                  .map((doc) => (\n                    <Tr key={doc.version}>\n                      <Td width=\"50%\">\n                        <Typography>{doc.version}</Typography>\n                      </Td>\n                      <Td width=\"50%\">\n                        <Typography>{doc.generatedDate}</Typography>\n                      </Td>\n                      <Td>\n                        <Flex justifyContent=\"end\" onClick={(e) => e.stopPropagation()}>\n                          <IconButton\n                            tag=\"a\"\n                            disabled={!allowedActions.canRead}\n                            href={createDocumentationHref(`${data.prefix}/v${doc.version}`)}\n                            variant=\"ghost\"\n                            target=\"_blank\"\n                            rel=\"noopener noreferrer\"\n                            label={formatMessage(\n                              {\n                                id: getTrad('pages.PluginPage.table.icon.show'),\n                                defaultMessage: 'Open {target}',\n                              },\n                              { target: `${doc.version}` }\n                            )}\n                          >\n                            <Show />\n                          </IconButton>\n                          {allowedActions.canRegenerate ? (\n                            <IconButton\n                              onClick={() => handleRegenerateDoc(doc.version)}\n                              variant=\"ghost\"\n                              label={formatMessage(\n                                {\n                                  id: getTrad('pages.PluginPage.table.icon.regenerate'),\n                                  defaultMessage: 'Regenerate {target}',\n                                },\n                                { target: `${doc.version}` }\n                              )}\n                            >\n                              <Reload />\n                            </IconButton>\n                          ) : null}\n                          {allowedActions.canUpdate && doc.version !== data.currentVersion ? (\n                            <IconButton\n                              onClick={() => handleClickDelete(doc.version)}\n                              variant=\"ghost\"\n                              label={formatMessage(\n                                {\n                                  id: 'global.delete-target',\n                                  defaultMessage: 'Delete {target}',\n                                },\n                                { target: `${doc.version}` }\n                              )}\n                            >\n                              <Trash />\n                            </IconButton>\n                          ) : null}\n                        </Flex>\n                      </Td>\n                    </Tr>\n                  ))}\n              </Tbody>\n            </Table>\n          ) : (\n            <EmptyStateLayout content=\"\" icon={null} />\n          )}\n        </Layouts.Content>\n        <Dialog.Root open={showConfirmDelete} onOpenChange={setShowConfirmDelete}>\n          <ConfirmDialog onConfirm={handleConfirmDelete} />\n        </Dialog.Root>\n      </Page.Main>\n    </Layouts.Root>\n  );\n};\n\n/**\n * TODO: should this be fixed in the DS?\n */\nconst OpenDocLink = styled(LinkButton)`\n  text-decoration: none;\n`;\n\nconst createDocumentationHref = (path: string) => {\n  if (path.startsWith('http')) {\n    return path;\n  }\n\n  if (path.startsWith('/')) {\n    return `${window.strapi.backendURL}${path}`;\n  }\n\n  return `${window.strapi.backendURL}/${path}`;\n};\n\nexport { App };\n"],
  "mappings": "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",
  "names": ["App", "formatMessage", "useIntl", "toggleNotification", "useNotification", "formatAPIError", "useAPIErrorHandler", "data", "isLoading", "isLoadingInfo", "isError", "useGetInfoQuery", "regenerate", "useRegenerateDocMutation", "deleteVersion", "useDeleteVersionMutation", "showConfirmDelete", "setShowConfirmDelete", "useState", "versionToDelete", "setVersionToDelete", "allowedActions", "isLoadingRBAC", "useRBAC", "PERMISSIONS", "colCount", "rowCount", "docVersions", "length", "handleRegenerateDoc", "version", "unwrap", "then", "type", "message", "id", "getTrad", "defaultMessage", "catch", "err", "handleConfirmDelete", "handleClickDelete", "title", "_jsx", "Page", "Loading", "Error", "_jsxs", "Layouts", "Root", "Title", "Main", "Header", "subtitle", "primaryAction", "OpenDocLink", "disabled", "canRead", "currentVersion", "prefix", "href", "createDocumentationHref", "startIcon", "Show", "Content", "Table", "Thead", "Tr", "Th", "Typography", "variant", "textColor", "Tbody", "slice", "sort", "a", "b", "generatedDate", "map", "doc", "Td", "width", "Flex", "justifyContent", "onClick", "e", "stopPropagation", "IconButton", "tag", "target", "rel", "label", "canRegenerate", "Reload", "canUpdate", "Trash", "EmptyStateLayout", "content", "icon", "Dialog", "open", "onOpenChange", "ConfirmDialog", "onConfirm", "styled", "LinkButton", "path", "startsWith", "window", "strapi", "backendURL"]
}
