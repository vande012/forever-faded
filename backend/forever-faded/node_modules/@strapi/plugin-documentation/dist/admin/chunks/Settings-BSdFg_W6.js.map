{"version":3,"file":"Settings-BSdFg_W6.js","sources":["../../../admin/src/utils/baseQuery.ts","../../../admin/src/components/SettingsForm.tsx","../../../admin/src/pages/Settings.tsx"],"sourcesContent":["import { SerializedError } from '@reduxjs/toolkit';\nimport { type UnknownApiError, type ApiError } from '@strapi/strapi/admin';\n\ntype BaseQueryError = ApiError | UnknownApiError | SerializedError;\n\nconst isBaseQueryError = (error: BaseQueryError): error is ApiError | UnknownApiError => {\n  return error.name !== undefined;\n};\n\nexport { isBaseQueryError };\n","import * as React from 'react';\n\nimport {\n  Box,\n  Button,\n  Flex,\n  Grid,\n  TextInput,\n  Toggle,\n  Typography,\n  Field,\n} from '@strapi/design-system';\n// Strapi Icons\nimport { Check, Eye as Show, EyeStriked as Hide } from '@strapi/icons';\nimport { translatedErrors, useRBAC, Layouts } from '@strapi/strapi/admin';\nimport { Form, Formik, FormikHelpers } from 'formik';\nimport { useIntl } from 'react-intl';\nimport { styled } from 'styled-components';\nimport * as yup from 'yup';\n\nimport { PERMISSIONS } from '../constants';\nimport { DocumentInfos, SettingsInput } from '../types';\nimport { getTrad } from '../utils';\n\nconst schema = yup.object().shape({\n  restrictedAccess: yup.boolean(),\n  password: yup.string().when('restrictedAccess', (value, initSchema) => {\n    return value\n      ? initSchema\n          .required(translatedErrors.required.id)\n          .min(8)\n          .matches(/[a-z]/, 'components.Input.error.contain.lowercase')\n          .matches(/[A-Z]/, 'components.Input.error.contain.uppercase')\n          .matches(/\\d/, 'components.Input.error.contain.number')\n      : initSchema;\n  }),\n});\n\nconst FieldActionWrapper = styled(Field.Action)`\n  svg {\n    height: 1.6rem;\n    width: 1.6rem;\n    path {\n      fill: ${({ theme }) => theme.colors.neutral600};\n    }\n  }\n`;\n\ntype SettingsFormProps = {\n  data?: DocumentInfos;\n  onSubmit: (body: SettingsInput, formik: FormikHelpers<SettingsInput>) => Promise<void>;\n};\n\nexport const SettingsForm = ({ data, onSubmit }: SettingsFormProps) => {\n  const { formatMessage } = useIntl();\n  const [passwordShown, setPasswordShown] = React.useState(false);\n  const { allowedActions } = useRBAC(PERMISSIONS);\n\n  return (\n    <Formik\n      enableReinitialize\n      initialValues={{\n        restrictedAccess: data?.documentationAccess.restrictedAccess || false,\n        password: '',\n      }}\n      onSubmit={onSubmit}\n      validationSchema={schema}\n    >\n      {({\n        handleSubmit,\n        values,\n        handleChange,\n        errors,\n        setFieldTouched,\n        setFieldValue,\n        setFieldError,\n        dirty,\n      }) => {\n        return (\n          <Form noValidate onSubmit={handleSubmit}>\n            <Layouts.Header\n              title={formatMessage({\n                id: getTrad('plugin.name'),\n                defaultMessage: 'Documentation',\n              })}\n              subtitle={formatMessage({\n                id: getTrad('pages.SettingsPage.header.description'),\n                defaultMessage: 'Configure the documentation plugin',\n              })}\n              primaryAction={\n                <Button\n                  type=\"submit\"\n                  startIcon={<Check />}\n                  disabled={!dirty && allowedActions.canUpdate}\n                >\n                  {formatMessage({\n                    id: getTrad('pages.SettingsPage.Button.save'),\n                    defaultMessage: 'Save',\n                  })}\n                </Button>\n              }\n            />\n            <Layouts.Content>\n              <Box\n                background=\"neutral0\"\n                hasRadius\n                shadow=\"filterShadow\"\n                paddingTop={6}\n                paddingBottom={6}\n                paddingLeft={7}\n                paddingRight={7}\n              >\n                <Flex direction=\"column\" alignItems=\"stretch\" gap={4}>\n                  <Typography variant=\"delta\" tag=\"h2\">\n                    {formatMessage({\n                      id: 'global.settings',\n                      defaultMessage: 'Settings',\n                    })}\n                  </Typography>\n                  <Grid.Root gap={4}>\n                    <Grid.Item col={6} s={12} direction=\"column\" alignItems=\"stretch\">\n                      <Field.Root\n                        name=\"restrictedAccess\"\n                        hint={formatMessage({\n                          id: getTrad('pages.SettingsPage.toggle.hint'),\n                          defaultMessage: 'Make the documentation endpoint private',\n                        })}\n                      >\n                        <Field.Label>\n                          {formatMessage({\n                            id: getTrad('pages.SettingsPage.toggle.label'),\n                            defaultMessage: 'Restricted Access',\n                          })}\n                        </Field.Label>\n                        <Toggle\n                          checked={values.restrictedAccess}\n                          onChange={() => {\n                            if (values.restrictedAccess === true) {\n                              setFieldValue('password', '', false);\n                              setFieldTouched('password', false, false);\n                              setFieldError('password', undefined);\n                            }\n\n                            setFieldValue('restrictedAccess', !values.restrictedAccess, false);\n                          }}\n                          onLabel=\"On\"\n                          offLabel=\"Off\"\n                        />\n                        <Field.Hint />\n                      </Field.Root>\n                    </Grid.Item>\n                    {values.restrictedAccess && (\n                      <Grid.Item col={6} s={12} direction=\"column\" alignItems=\"stretch\">\n                        <Field.Root\n                          name=\"password\"\n                          error={\n                            errors.password\n                              ? formatMessage({\n                                  id: errors.password,\n                                  defaultMessage: errors.password,\n                                })\n                              : undefined\n                          }\n                        >\n                          <Field.Label>\n                            {formatMessage({\n                              id: 'global.password',\n                              defaultMessage: 'Password',\n                            })}\n                          </Field.Label>\n                          <TextInput\n                            placeholder=\"**********\"\n                            type={passwordShown ? 'text' : 'password'}\n                            value={values.password}\n                            onChange={handleChange}\n                            endAction={\n                              <FieldActionWrapper\n                                onClick={(e) => {\n                                  e.stopPropagation();\n                                  setPasswordShown((prev) => !prev);\n                                }}\n                                label={formatMessage(\n                                  passwordShown\n                                    ? {\n                                        id: 'Auth.form.password.show-password',\n                                        defaultMessage: 'Show password',\n                                      }\n                                    : {\n                                        id: 'Auth.form.password.hide-password',\n                                        defaultMessage: 'Hide password',\n                                      }\n                                )}\n                              >\n                                {passwordShown ? <Show /> : <Hide />}\n                              </FieldActionWrapper>\n                            }\n                          />\n                          <Field.Error />\n                        </Field.Root>\n                      </Grid.Item>\n                    )}\n                  </Grid.Root>\n                </Flex>\n              </Box>\n            </Layouts.Content>\n          </Form>\n        );\n      }}\n    </Formik>\n  );\n};\n","import * as React from 'react';\n\nimport { Main } from '@strapi/design-system';\nimport { useAPIErrorHandler, Page, useNotification } from '@strapi/strapi/admin';\nimport { FormikHelpers } from 'formik';\nimport { useIntl } from 'react-intl';\n\nimport { SettingsForm } from '../components/SettingsForm';\nimport { useGetInfoQuery, useUpdateSettingsMutation } from '../services/api';\nimport { getTrad, isBaseQueryError } from '../utils';\n\nimport type { SettingsInput } from '../types';\n\nconst SettingsPage = () => {\n  const { toggleNotification } = useNotification();\n  const { formatMessage } = useIntl();\n  const {\n    _unstableFormatAPIError: formatAPIError,\n    _unstableFormatValidationErrors: formatValidationErrors,\n  } = useAPIErrorHandler();\n  const { data, isError, isLoading, isFetching } = useGetInfoQuery();\n  const [updateSettings] = useUpdateSettingsMutation();\n\n  const onUpdateSettings = async (body: SettingsInput, formik: FormikHelpers<SettingsInput>) => {\n    return updateSettings({ body })\n      .unwrap()\n      .then(() => {\n        toggleNotification({\n          type: 'success',\n          message: formatMessage({\n            id: getTrad('notification.update.success'),\n            defaultMessage: 'Successfully updated settings',\n          }),\n        });\n      })\n      .catch((err) => {\n        if (isBaseQueryError(err) && err.name === 'ValidationError') {\n          toggleNotification({\n            type: 'danger',\n            message: formatAPIError(err),\n          });\n        }\n      });\n  };\n\n  if (isLoading || isFetching) {\n    return <Page.Loading />;\n  }\n\n  if (isError) {\n    return <Page.Error />;\n  }\n\n  return (\n    <Main>\n      <SettingsForm data={data} onSubmit={onUpdateSettings} />\n    </Main>\n  );\n};\n\nexport { SettingsPage };\n"],"names":["isBaseQueryError","error","name","undefined","schema","yup","object","shape","restrictedAccess","boolean","password","string","when","value","initSchema","required","translatedErrors","id","min","matches","FieldActionWrapper","styled","Field","Action","theme","colors","neutral600","SettingsForm","data","onSubmit","formatMessage","useIntl","passwordShown","setPasswordShown","React","useState","allowedActions","useRBAC","PERMISSIONS","_jsx","Formik","enableReinitialize","initialValues","documentationAccess","validationSchema","handleSubmit","values","handleChange","errors","setFieldTouched","setFieldValue","setFieldError","dirty","_jsxs","Form","noValidate","Layouts","Header","title","getTrad","defaultMessage","subtitle","primaryAction","Button","type","startIcon","Check","disabled","canUpdate","Content","Box","background","hasRadius","shadow","paddingTop","paddingBottom","paddingLeft","paddingRight","Flex","direction","alignItems","gap","Typography","variant","tag","Grid","Root","Item","col","s","hint","Label","Toggle","checked","onChange","onLabel","offLabel","Hint","TextInput","placeholder","endAction","onClick","e","stopPropagation","prev","label","Show","Hide","Error","SettingsPage","toggleNotification","useNotification","_unstableFormatAPIError","formatAPIError","_unstableFormatValidationErrors","formatValidationErrors","useAPIErrorHandler","isError","isLoading","isFetching","useGetInfoQuery","updateSettings","useUpdateSettingsMutation","onUpdateSettings","body","formik","unwrap","then","message","catch","err","Page","Loading","Main"],"mappings":"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"}