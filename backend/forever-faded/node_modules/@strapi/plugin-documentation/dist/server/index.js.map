{"version":3,"file":"index.js","sources":["../../server/src/utils.ts","../../server/src/bootstrap.ts","../../server/src/middlewares/documentation.ts","../../server/src/register.ts","../../server/src/services/helpers/utils/pascal-case.ts","../../server/src/services/helpers/utils/query-params.ts","../../server/src/services/helpers/utils/loop-content-type-names.ts","../../server/src/services/helpers/utils/get-api-responses.ts","../../server/src/services/helpers/utils/routes.ts","../../server/src/services/helpers/build-api-endpoint-path.ts","../../server/src/services/helpers/utils/get-schema-data.ts","../../server/src/services/helpers/utils/clean-schema-attributes.ts","../../server/src/services/helpers/build-component-schema.ts","../../server/src/services/utils/get-plugins-that-need-documentation.ts","../../server/src/services/documentation.ts","../../server/src/services/override.ts","../../server/src/services/index.ts","../../server/src/middlewares/restrict-access.ts","../../server/src/routes/index.ts","../../server/src/controllers/documentation.ts","../../server/src/controllers/index.ts","../../server/src/config/default-plugin-config.ts","../../server/src/config/index.ts","../../server/src/index.ts"],"sourcesContent":["import type { Core } from '@strapi/types';\n\nimport type { Services } from './services';\n\nexport const getService = <TName extends keyof Services>(\n  name: TName,\n  { strapi }: { strapi: Core.Strapi } = { strapi: global.strapi }\n): Services[TName] => {\n  return strapi.plugin('documentation').service<Services[TName]>(name);\n};\n\nexport default {\n  getService,\n};\n","import type { Core } from '@strapi/types';\n\nimport { getService } from './utils';\n\n// Add permissions\nconst RBAC_ACTIONS = [\n  {\n    section: 'plugins',\n    displayName: 'Access the Documentation',\n    uid: 'read',\n    pluginName: 'documentation',\n  },\n  {\n    section: 'plugins',\n    displayName: 'Update and delete',\n    uid: 'settings.update',\n    pluginName: 'documentation',\n  },\n  {\n    section: 'plugins',\n    displayName: 'Regenerate',\n    uid: 'settings.regenerate',\n    pluginName: 'documentation',\n  },\n  {\n    section: 'settings',\n    displayName: 'Access the documentation settings page',\n    uid: 'settings.read',\n    pluginName: 'documentation',\n    category: 'documentation',\n  },\n];\n\nexport async function bootstrap({ strapi }: { strapi: Core.Strapi }) {\n  await strapi.service('admin::permission').actionProvider.registerMany(RBAC_ACTIONS);\n\n  const pluginStore = strapi.store!({\n    environment: '',\n    type: 'plugin',\n    name: 'documentation',\n  });\n\n  const config = await pluginStore.get({ key: 'config' });\n\n  if (!config) {\n    pluginStore.set({ key: 'config', value: { restrictedAccess: false } });\n  }\n  if (process.env.NODE_ENV !== 'production') {\n    await getService('documentation').generateFullDoc();\n  }\n}\n","import path from 'path';\nimport koaStatic from 'koa-static';\nimport swaggerUi from 'swagger-ui-dist';\n\nimport type { Core } from '@strapi/types';\n\nexport const addDocumentMiddlewares = async ({ strapi }: { strapi: Core.Strapi }) => {\n  strapi.server.routes([\n    {\n      method: 'GET',\n      path: '/plugins/documentation/(.*)',\n      async handler(ctx, next) {\n        ctx.url = path.basename(ctx.url);\n\n        return koaStatic(swaggerUi.getAbsoluteFSPath(), {\n          maxage: 86400000,\n          defer: true,\n        })(ctx, next);\n      },\n      config: {\n        auth: false,\n      },\n    },\n  ]);\n};\n","import type { Core } from '@strapi/types';\n\nimport { addDocumentMiddlewares } from './middlewares/documentation';\n\nexport async function register({ strapi }: { strapi: Core.Strapi }) {\n  await addDocumentMiddlewares({ strapi });\n}\n","import _ from 'lodash';\n\nconst pascalCase = (string: string) => {\n  return _.upperFirst(_.camelCase(string));\n};\n\nexport default pascalCase;\n","import type { OpenAPIV3 } from 'openapi-types';\n\nconst params: OpenAPIV3.ParameterObject[] = [\n  {\n    name: 'sort',\n    in: 'query',\n    description: 'Sort by attributes ascending (asc) or descending (desc)',\n    deprecated: false,\n    required: false,\n    schema: {\n      type: 'string',\n    },\n  },\n  {\n    name: 'pagination[withCount]',\n    in: 'query',\n    description: 'Return page/pageSize (default: true)',\n    deprecated: false,\n    required: false,\n    schema: {\n      type: 'boolean',\n    },\n  },\n  {\n    name: 'pagination[page]',\n    in: 'query',\n    description: 'Page number (default: 0)',\n    deprecated: false,\n    required: false,\n    schema: {\n      type: 'integer',\n    },\n  },\n  {\n    name: 'pagination[pageSize]',\n    in: 'query',\n    description: 'Page size (default: 25)',\n    deprecated: false,\n    required: false,\n    schema: {\n      type: 'integer',\n    },\n  },\n  {\n    name: 'pagination[start]',\n    in: 'query',\n    description: 'Offset value (default: 0)',\n    deprecated: false,\n    required: false,\n    schema: {\n      type: 'integer',\n    },\n  },\n  {\n    name: 'pagination[limit]',\n    in: 'query',\n    description: 'Number of entities to return (default: 25)',\n    deprecated: false,\n    required: false,\n    schema: {\n      type: 'integer',\n    },\n  },\n  {\n    name: 'fields',\n    in: 'query',\n    description: 'Fields to return (ex: title,author)',\n    deprecated: false,\n    required: false,\n    schema: {\n      type: 'string',\n    },\n  },\n  {\n    name: 'populate',\n    in: 'query',\n    description: 'Relations to return',\n    deprecated: false,\n    required: false,\n    schema: {\n      type: 'string',\n    },\n  },\n  {\n    name: 'filters',\n    in: 'query',\n    description: 'Filters to apply',\n    deprecated: false,\n    required: false,\n    schema: {\n      type: 'object',\n      additionalProperties: true,\n    },\n    style: 'deepObject',\n  },\n  {\n    name: 'locale',\n    in: 'query',\n    description: 'Locale to apply',\n    deprecated: false,\n    required: false,\n    schema: {\n      type: 'string',\n    },\n  },\n];\n\nexport default params;\n","import _ from 'lodash';\n\nimport type { Api, ApiInfo } from '../../../types';\n\n/**\n * @description A reusable loop for building api endpoint paths and component schemas\n */\nconst loopContentTypeNames = (api: Api, callback: (info: ApiInfo) => any) => {\n  let result = {};\n  for (const contentTypeName of api.ctNames) {\n    // Get the attributes found on the api's contentType\n    const uid = `${api.getter}::${api.name}.${contentTypeName}`;\n\n    const { attributes, info: contentTypeInfo, kind } = strapi.contentType(uid as any);\n\n    // Get the routes for the current api\n    const routeInfo =\n      api.getter === 'plugin'\n        ? // @ts-expect-error â€“ TODO: fix this\n          strapi.plugin(api.name).routes['content-api']\n        : strapi.api(api.name).routes[contentTypeName];\n\n    // Continue to next iteration if routeInfo is undefined\n    if (!routeInfo) {\n      continue;\n    }\n\n    // Uppercase the first letter of the api name\n    const apiName = _.upperFirst(api.name);\n\n    // Create a unique name if the api name and contentType name don't match\n    const uniqueName =\n      api.name === contentTypeName ? apiName : `${apiName} - ${_.upperFirst(contentTypeName)}`;\n\n    const apiInfo = {\n      ...api,\n      routeInfo,\n      attributes,\n      uniqueName,\n      contentTypeInfo,\n      kind,\n    };\n\n    result = {\n      ...result,\n      ...callback(apiInfo),\n    };\n  }\n\n  return result;\n};\n\nexport default loopContentTypeNames;\n","import type { OpenAPIV3 } from 'openapi-types';\nimport pascalCase from './pascal-case';\n\ninterface Options {\n  uniqueName: string;\n  route: {\n    method: string;\n  };\n  isListOfEntities?: boolean;\n  isLocalizationPath?: boolean;\n}\n\n/**\n * @description - Builds the Swagger response object for a given api\n */\nconst getApiResponse = ({\n  uniqueName,\n  route,\n  isListOfEntities = false,\n}: Options): OpenAPIV3.ResponsesObject => {\n  const getSchema = (): OpenAPIV3.SchemaObject | OpenAPIV3.ReferenceObject => {\n    if (route.method === 'DELETE') {\n      return {\n        type: 'integer',\n        format: 'int64',\n      };\n    }\n\n    if (isListOfEntities) {\n      return { $ref: `#/components/schemas/${pascalCase(uniqueName)}ListResponse` };\n    }\n\n    return { $ref: `#/components/schemas/${pascalCase(uniqueName)}Response` };\n  };\n\n  const schema = getSchema();\n\n  return {\n    200: {\n      description: 'OK',\n      content: {\n        'application/json': {\n          schema,\n        },\n      },\n    },\n    400: {\n      description: 'Bad Request',\n      content: {\n        'application/json': {\n          schema: {\n            $ref: '#/components/schemas/Error',\n          },\n        },\n      },\n    },\n    401: {\n      description: 'Unauthorized',\n      content: {\n        'application/json': {\n          schema: {\n            $ref: '#/components/schemas/Error',\n          },\n        },\n      },\n    },\n    403: {\n      description: 'Forbidden',\n      content: {\n        'application/json': {\n          schema: {\n            $ref: '#/components/schemas/Error',\n          },\n        },\n      },\n    },\n    404: {\n      description: 'Not Found',\n      content: {\n        'application/json': {\n          schema: {\n            $ref: '#/components/schemas/Error',\n          },\n        },\n      },\n    },\n    500: {\n      description: 'Internal Server Error',\n      content: {\n        'application/json': {\n          schema: {\n            $ref: '#/components/schemas/Error',\n          },\n        },\n      },\n    },\n  };\n};\n\nexport default getApiResponse;\n","const hasFindMethod = (handler: unknown) => {\n  if (typeof handler === 'string') {\n    return handler.split('.').pop() === 'find';\n  }\n\n  return false;\n};\n\nexport { hasFindMethod };\n","import _ from 'lodash';\nimport * as pathToRegexp from 'path-to-regexp';\n\nimport type { Core } from '@strapi/types';\nimport type { OpenAPIV3 } from 'openapi-types';\n\nimport pascalCase from './utils/pascal-case';\nimport queryParams from './utils/query-params';\nimport loopContentTypeNames from './utils/loop-content-type-names';\nimport getApiResponses from './utils/get-api-responses';\nimport { hasFindMethod } from './utils/routes';\n\nimport type { Api, ApiInfo } from '../../types';\n\n/**\n * @description Parses a route with ':variable'\n *\n * @param {string} routePath - The route's path property\n * @returns {string}\n */\nconst parsePathWithVariables = (routePath: string): string => {\n  const { tokens } = pathToRegexp.parse(routePath);\n\n  return tokens\n    .map((token) => {\n      switch (token.type) {\n        case 'text':\n          return token.value;\n        case 'param':\n          return `{${token.name}}`;\n        case 'wildcard':\n          return `{${token.name}}`;\n        case 'group':\n          // Handle group tokens by mapping them within the same function context\n          return `(${parsePathWithVariables(token.tokens.map((t) => t satisfies pathToRegexp.Token).join(''))})`;\n        default:\n          throw new Error(`Unknown token type: ${(token as any).type}`);\n      }\n    })\n    .join('');\n};\n\n/**\n * @description Builds the required object for a path parameter\n *\n * @param {string} routePath - The route's path property\n *\n * @returns {object } Swagger path params object\n */\nconst getPathParams = (routePath: string): OpenAPIV3.ParameterObject[] => {\n  const { tokens } = pathToRegexp.parse(routePath);\n\n  return tokens.reduce((acc, param) => {\n    // Skip non-parameter tokens\n    if (param.type !== 'param') {\n      return acc;\n    }\n\n    acc.push({\n      name: `${param.name}`,\n      in: 'path',\n      description: '',\n      deprecated: false,\n      required: true,\n      schema: { type: 'number' },\n    });\n\n    return acc;\n  }, [] as OpenAPIV3.ParameterObject[]);\n};\n\nconst getPathWithPrefix = (prefix: string | undefined, route: Core.Route) => {\n  // When the prefix is set on the routes and\n  // the current route is not trying to remove it\n  if (prefix && !_.has(route.config, 'prefix')) {\n    // Add the prefix to the path\n    return prefix.concat(route.path);\n  }\n\n  // Otherwise just return path\n  return route.path;\n};\n\n/**\n * @description Gets all paths based on routes\n *\n * @param {object} apiInfo\n * @property {object} apiInfo.routeInfo - The api routes object\n * @property {string} apiInfo.uniqueName - Content type name | Api name + Content type name\n * @property {object} apiInfo.contentTypeInfo - The info object found on content type schemas\n *\n * @returns {object}\n */\nconst getPaths = ({ routeInfo, uniqueName, contentTypeInfo, kind }: ApiInfo) => {\n  // Get the routes for the current content type\n  const contentTypeRoutes = routeInfo.routes.filter((route) => {\n    return (\n      route.path.includes(contentTypeInfo.pluralName) ||\n      route.path.includes(contentTypeInfo.singularName)\n    );\n  });\n\n  const paths = contentTypeRoutes.reduce((acc: any, route: Core.Route) => {\n    // TODO: Find a more reliable way to determine list of entities vs a single entity\n    const isListOfEntities = hasFindMethod(route.handler);\n    const methodVerb = route.method.toLowerCase();\n    const hasPathParams = route.path.includes('/:');\n    const pathWithPrefix = getPathWithPrefix(routeInfo.prefix, route);\n    const routePath = hasPathParams ? parsePathWithVariables(pathWithPrefix) : pathWithPrefix;\n\n    const responses = getApiResponses({\n      uniqueName,\n      route,\n      isListOfEntities: kind !== 'singleType' && isListOfEntities,\n    });\n\n    const swaggerConfig: OpenAPIV3.OperationObject = {\n      responses,\n      tags: [_.upperFirst(uniqueName)],\n      parameters: [],\n      operationId: `${methodVerb}${routePath}`,\n    };\n\n    if (isListOfEntities) {\n      swaggerConfig.parameters?.push(...queryParams);\n    }\n\n    if (hasPathParams) {\n      const pathParams = getPathParams(route.path);\n      swaggerConfig.parameters?.push(...pathParams);\n    }\n\n    if (['post', 'put'].includes(methodVerb)) {\n      const refName = 'Request';\n      const requestBody = {\n        required: true,\n        content: {\n          'application/json': {\n            schema: {\n              $ref: `#/components/schemas/${pascalCase(uniqueName)}${refName}`,\n            },\n          },\n        },\n      };\n\n      swaggerConfig.requestBody = requestBody;\n    }\n\n    _.set(acc, `${routePath}.${methodVerb}`, swaggerConfig);\n\n    return acc;\n  }, {});\n\n  return paths;\n};\n\n/**\n * @description - Builds the Swagger paths object for each api\n */\nconst buildApiEndpointPath = (api: Api) => {\n  // A reusable loop for building paths and component schemas\n  // Uses the api param to build a new set of params for each content type\n  // Passes these new params to the function provided\n  return loopContentTypeNames(api, getPaths);\n};\n\nexport default buildApiEndpointPath;\n","import type { OpenAPIV3 } from 'openapi-types';\n\n/**\n * @description Determines the format of the data response\n *\n * @param {boolean} isListOfEntities - Checks for a multiple entities\n * @param {object} attributes - The attributes found on a contentType\n\n * @returns object | array of attributes\n */\nexport default (\n  isListOfEntities: boolean,\n  attributes: Record<string, OpenAPIV3.SchemaObject | OpenAPIV3.ReferenceObject>\n): OpenAPIV3.SchemaObject => {\n  if (isListOfEntities) {\n    return {\n      type: 'array',\n      items: {\n        type: 'object',\n        properties: {\n          id: { type: 'number' },\n          documentId: { type: 'string' },\n          ...attributes,\n        },\n      },\n    };\n  }\n\n  return {\n    type: 'object',\n    properties: {\n      id: { type: 'number' },\n      documentId: { type: 'string' },\n      ...attributes,\n    },\n  };\n};\n","import type { Struct } from '@strapi/types';\nimport type { OpenAPIV3 } from 'openapi-types';\n\nimport getSchemaData from './get-schema-data';\nimport pascalCase from './pascal-case';\n\ninterface Options {\n  typeMap?: Map<string, boolean>;\n  isRequest?: boolean;\n  didAddStrapiComponentsToSchemas: (name: string, schema: object) => boolean;\n}\n\n/**\n * @description - Convert attribute component names to OpenAPI component names\n *\n * @returns OpenAPI component name\n */\nconst convertComponentName = (component: string, isRef = false): string => {\n  const cleanComponentName = `${pascalCase(component)}Component`;\n\n  if (isRef) {\n    return `#/components/schemas/${cleanComponentName}`;\n  }\n  return cleanComponentName;\n};\n\n/**\n * @description - Converts types found on attributes to OpenAPI acceptable data types\n *\n * @returns Attributes using OpenAPI acceptable data types\n */\nconst cleanSchemaAttributes = (\n  attributes: Struct.SchemaAttributes,\n  { typeMap = new Map(), isRequest = false, didAddStrapiComponentsToSchemas }: Options\n) => {\n  const schemaAttributes: Record<string, OpenAPIV3.SchemaObject | OpenAPIV3.ReferenceObject> = {};\n\n  for (const prop of Object.keys(attributes)) {\n    const attribute = attributes[prop];\n\n    switch (attribute.type) {\n      case 'password': {\n        if (!isRequest) {\n          break;\n        }\n\n        schemaAttributes[prop] = { type: 'string', format: 'password', example: '*******' };\n        break;\n      }\n      case 'email': {\n        schemaAttributes[prop] = { type: 'string', format: 'email' };\n        break;\n      }\n      case 'string':\n      case 'text':\n      case 'richtext': {\n        schemaAttributes[prop] = { type: 'string' };\n        break;\n      }\n      case 'timestamp': {\n        schemaAttributes[prop] = { type: 'string', format: 'timestamp', example: Date.now() };\n        break;\n      }\n      case 'time': {\n        schemaAttributes[prop] = { type: 'string', format: 'time', example: '12:54.000' };\n        break;\n      }\n      case 'date': {\n        schemaAttributes[prop] = { type: 'string', format: 'date' };\n        break;\n      }\n      case 'datetime': {\n        schemaAttributes[prop] = { type: 'string', format: 'date-time' };\n        break;\n      }\n      case 'boolean': {\n        schemaAttributes[prop] = { type: 'boolean' };\n        break;\n      }\n      case 'enumeration': {\n        schemaAttributes[prop] = { type: 'string', enum: [...attribute.enum] };\n        break;\n      }\n      case 'decimal':\n      case 'float': {\n        schemaAttributes[prop] = { type: 'number', format: 'float' };\n        break;\n      }\n      case 'integer': {\n        schemaAttributes[prop] = { type: 'integer' };\n        break;\n      }\n      case 'biginteger': {\n        schemaAttributes[prop] = { type: 'string', pattern: '^\\\\d*$', example: '123456789' };\n        break;\n      }\n      case 'json':\n      case 'blocks': {\n        schemaAttributes[prop] = {};\n        break;\n      }\n      case 'uid': {\n        schemaAttributes[prop] = { type: 'string' };\n        break;\n      }\n      case 'component': {\n        const componentAttributes = strapi.components[attribute.component].attributes;\n        const rawComponentSchema: OpenAPIV3.SchemaObject = {\n          type: 'object',\n          properties: {\n            ...(isRequest ? {} : { id: { type: 'number' } }),\n            ...cleanSchemaAttributes(componentAttributes, {\n              typeMap,\n              isRequest,\n              didAddStrapiComponentsToSchemas,\n            }),\n          },\n        };\n\n        const refComponentSchema: OpenAPIV3.ReferenceObject = {\n          $ref: convertComponentName(attribute.component, true),\n        };\n\n        const componentExists = didAddStrapiComponentsToSchemas(\n          convertComponentName(attribute.component),\n          rawComponentSchema\n        );\n\n        const finalComponentSchema = componentExists ? refComponentSchema : rawComponentSchema;\n        if (attribute.repeatable) {\n          schemaAttributes[prop] = {\n            type: 'array',\n            items: finalComponentSchema,\n          };\n        } else {\n          schemaAttributes[prop] = finalComponentSchema;\n        }\n        break;\n      }\n      case 'dynamiczone': {\n        const components = attribute.components.map((component) => {\n          const componentAttributes = strapi.components[component].attributes;\n          const rawComponentSchema: OpenAPIV3.SchemaObject = {\n            type: 'object',\n            properties: {\n              ...(isRequest ? {} : { id: { type: 'number' } }),\n              __component: { type: 'string', enum: [component] },\n              ...cleanSchemaAttributes(componentAttributes, {\n                typeMap,\n                isRequest,\n                didAddStrapiComponentsToSchemas,\n              }),\n            },\n          };\n\n          const refComponentSchema: OpenAPIV3.ReferenceObject = {\n            $ref: convertComponentName(component, true),\n          };\n\n          const componentExists = didAddStrapiComponentsToSchemas(\n            convertComponentName(component),\n            rawComponentSchema\n          );\n          const finalComponentSchema = componentExists ? refComponentSchema : rawComponentSchema;\n          return finalComponentSchema;\n        });\n        let discriminator: OpenAPIV3.DiscriminatorObject | undefined;\n        if (components.every((component) => Object.hasOwn(component, '$ref'))) {\n          discriminator = {\n            propertyName: '__component',\n            mapping: attribute.components.reduce(\n              (acc, component) => {\n                acc[component] = convertComponentName(component, true);\n                return acc;\n              },\n              {} as {\n                [value: string]: string;\n              }\n            ),\n          };\n        }\n\n        schemaAttributes[prop] = {\n          type: 'array',\n          items: {\n            anyOf: components,\n          },\n          discriminator,\n        };\n        break;\n      }\n      case 'media': {\n        const imageAttributes = strapi.contentType('plugin::upload.file').attributes;\n        const isListOfEntities = attribute.multiple ?? false;\n\n        if (isRequest) {\n          const oneOfType: OpenAPIV3.SchemaObject = {\n            oneOf: [{ type: 'integer' }, { type: 'string' }],\n            example: 'string or id',\n          };\n\n          schemaAttributes[prop] = isListOfEntities\n            ? { type: 'array', items: oneOfType }\n            : oneOfType;\n          break;\n        }\n\n        schemaAttributes[prop] = getSchemaData(\n          isListOfEntities,\n          cleanSchemaAttributes(imageAttributes, { typeMap, didAddStrapiComponentsToSchemas })\n        );\n        break;\n      }\n\n      case 'relation': {\n        const isListOfEntities = attribute.relation.includes('ToMany');\n\n        if (isRequest) {\n          const oneOfType: OpenAPIV3.SchemaObject = {\n            oneOf: [{ type: 'integer' }, { type: 'string' }],\n            example: 'string or id',\n          };\n\n          schemaAttributes[prop] = isListOfEntities\n            ? { type: 'array', items: oneOfType }\n            : oneOfType;\n          break;\n        }\n\n        if (!('target' in attribute) || !attribute.target || typeMap.has(attribute.target)) {\n          schemaAttributes[prop] = getSchemaData(isListOfEntities, {});\n\n          break;\n        }\n\n        typeMap.set(attribute.target, true);\n        const targetAttributes = strapi.contentType(attribute.target).attributes;\n\n        schemaAttributes[prop] = getSchemaData(\n          isListOfEntities,\n          cleanSchemaAttributes(targetAttributes, {\n            typeMap,\n            isRequest,\n            didAddStrapiComponentsToSchemas,\n          })\n        );\n\n        break;\n      }\n      default: {\n        // @ts-expect-error - This is a catch all for any other types\n        throw new Error(`Invalid type ${attribute.type} while generating open api schema.`);\n      }\n    }\n  }\n\n  return schemaAttributes;\n};\n\nexport default cleanSchemaAttributes;\n","import _ from 'lodash';\n\nimport type { OpenAPIV3 } from 'openapi-types';\nimport type { Core, Struct } from '@strapi/types';\n\nimport cleanSchemaAttributes from './utils/clean-schema-attributes';\nimport loopContentTypeNames from './utils/loop-content-type-names';\nimport pascalCase from './utils/pascal-case';\nimport { hasFindMethod } from './utils/routes';\n\nimport type { Api, ApiInfo } from '../../types';\n\nconst getRequiredAttributes = (allAttributes: Struct.SchemaAttributes) => {\n  const requiredAttributes: string[] = [];\n\n  for (const key in allAttributes) {\n    if (allAttributes[key].required) {\n      requiredAttributes.push(key);\n    }\n  }\n\n  return requiredAttributes;\n};\n\n/**\n * @description Get all open api schema objects for a given content type\n *\n * @param {object} apiInfo\n * @property {string} apiInfo.uniqueName - Api name | Api name + Content type name\n * @property {object} apiInfo.attributes - Attributes on content type\n * @property {object} apiInfo.routeInfo - The routes for the api\n *\n * @returns {object} Open API schemas\n */\nconst getAllSchemasForContentType = ({ routeInfo, attributes, uniqueName }: ApiInfo) => {\n  // Store response and request schemas in an object\n  let strapiComponentSchemas = {};\n  const schemas: OpenAPIV3.ComponentsObject = {};\n  const typeName = pascalCase(uniqueName);\n\n  // adds a ComponentSchema to the Schemas so it can be used as Ref\n  const didAddStrapiComponentsToSchemas = (schemaName: string, schema: OpenAPIV3.SchemaObject) => {\n    if (!Object.keys(schema) || !Object.keys(schema.properties!)) return false;\n\n    // Add the Strapi components to the schema\n    strapiComponentSchemas = {\n      ...strapiComponentSchemas,\n      [schemaName]: schema,\n    };\n\n    return true;\n  };\n\n  // Get all the route methods\n  const routeMethods = routeInfo.routes.map((route: Core.Route) => route.method);\n\n  const attributesToOmit = [\n    'createdAt',\n    'updatedAt',\n    'publishedAt',\n    'publishedBy',\n    'updatedBy',\n    'createdBy',\n  ];\n\n  const attributesForRequest = _.omit(attributes, attributesToOmit);\n  // Get a list of required attribute names\n  const requiredRequestAttributes = getRequiredAttributes(attributesForRequest);\n  // Build the request schemas when the route has POST or PUT methods\n  if (routeMethods.includes('POST') || routeMethods.includes('PUT')) {\n    // Build localization requests schemas\n\n    // Build the request schema\n    Object.assign(schemas, {\n      [`${typeName}Request`]: {\n        type: 'object',\n        required: ['data'],\n        properties: {\n          data: {\n            ...(requiredRequestAttributes.length && { required: requiredRequestAttributes }),\n            type: 'object',\n            properties: cleanSchemaAttributes(attributesForRequest, {\n              isRequest: true,\n              didAddStrapiComponentsToSchemas,\n            }),\n          },\n        },\n      },\n    });\n  }\n\n  // Check for routes that need to return a list\n  const hasListOfEntities = routeInfo.routes.filter((route: Core.Route) =>\n    hasFindMethod(route.handler)\n  ).length;\n\n  if (hasListOfEntities) {\n    // Build the list response schema\n    Object.assign(schemas, {\n      [`${typeName}ListResponse`]: {\n        type: 'object',\n        properties: {\n          data: {\n            type: 'array',\n            items: {\n              $ref: `#/components/schemas/${typeName}`,\n            },\n          },\n          meta: {\n            type: 'object',\n            properties: {\n              pagination: {\n                type: 'object',\n                properties: {\n                  page: { type: 'integer' },\n                  pageSize: { type: 'integer', minimum: 25 },\n                  pageCount: { type: 'integer', maximum: 1 },\n                  total: { type: 'integer' },\n                },\n              },\n            },\n          },\n        },\n      },\n    });\n  }\n\n  const requiredAttributes = getRequiredAttributes(attributes);\n  // Build the response schema\n  Object.assign(schemas, {\n    [`${typeName}`]: {\n      type: 'object',\n      ...(requiredAttributes.length && { required: requiredAttributes }),\n      properties: {\n        id: { type: 'number' },\n        documentId: { type: 'string' },\n        ...cleanSchemaAttributes(attributes, { didAddStrapiComponentsToSchemas }),\n      },\n    },\n\n    [`${typeName}Response`]: {\n      type: 'object',\n      properties: {\n        data: {\n          $ref: `#/components/schemas/${typeName}`,\n        },\n        meta: { type: 'object' },\n      },\n    },\n  });\n\n  return { ...schemas, ...strapiComponentSchemas };\n};\n\nconst buildComponentSchema = (api: Api) => {\n  // A reusable loop for building paths and component schemas\n  // Uses the api param to build a new set of params for each content type\n  // Passes these new params to the function provided\n  return loopContentTypeNames(api, getAllSchemasForContentType);\n};\n\nexport default buildComponentSchema;\n","import type { PluginConfig } from '../../types';\n\nconst getPluginsThatNeedDocumentation = (config: PluginConfig) => {\n  // Default plugins that need documentation generated\n  const defaultPlugins = ['upload', 'users-permissions'];\n\n  // User specified plugins that need documentation generated\n  const userPluginsConfig = config['x-strapi-config'].plugins;\n\n  if (userPluginsConfig === null) {\n    // The user hasn't specified any plugins to document, use the defaults\n    return defaultPlugins;\n  }\n\n  if (userPluginsConfig.length) {\n    // The user has specified certain plugins to document, use them\n    return userPluginsConfig;\n  }\n\n  // The user has specified that no plugins should be documented\n  return [];\n};\n\nexport { getPluginsThatNeedDocumentation };\n","import path from 'path';\nimport fs from 'fs-extra';\nimport { produce } from 'immer';\nimport type { Core } from '@strapi/types';\n\nimport { builApiEndpointPath, buildComponentSchema } from './helpers';\nimport { getPluginsThatNeedDocumentation } from './utils/get-plugins-that-need-documentation';\nimport { getService } from '../utils';\n\nimport type { Config, PluginConfig } from '../types';\n\nexport type Version = {\n  version: string;\n  generatedDate: string;\n  url: string;\n};\n\nexport type DocumentationService = ReturnType<typeof createService>;\n\nconst createService = ({ strapi }: { strapi: Core.Strapi }) => {\n  const config = strapi.config.get('plugin::documentation') as PluginConfig;\n  const pluginsThatNeedDocumentation = getPluginsThatNeedDocumentation(config);\n  const overrideService = getService('override');\n\n  return {\n    getDocumentationVersion() {\n      return config.info.version;\n    },\n\n    getFullDocumentationPath() {\n      return path.join(strapi.dirs.app.extensions, 'documentation', 'documentation');\n    },\n\n    getDocumentationVersions(): Version[] {\n      return fs\n        .readdirSync(this.getFullDocumentationPath())\n        .map((version) => {\n          try {\n            const filePath = path.resolve(\n              this.getFullDocumentationPath(),\n              version,\n              'full_documentation.json'\n            );\n\n            const doc = JSON.parse(fs.readFileSync(filePath).toString());\n\n            const generatedDate = doc.info['x-generation-date'];\n\n            return { version, generatedDate, url: '' };\n          } catch (err) {\n            return null;\n          }\n        })\n        .filter((x) => x) as Version[];\n    },\n\n    /**\n     * Returns settings stored in core-store\n     */\n    async getDocumentationAccess() {\n      const { restrictedAccess } = (await strapi.store!({\n        environment: '',\n        type: 'plugin',\n        name: 'documentation',\n        key: 'config',\n      }).get()) as Config;\n\n      return { restrictedAccess };\n    },\n\n    getApiDocumentationPath(api: { name: string; getter: string }) {\n      if (api.getter === 'plugin') {\n        return path.join(strapi.dirs.app.extensions, api.name, 'documentation');\n      }\n\n      return path.join(strapi.dirs.app.api, api.name, 'documentation');\n    },\n\n    async deleteDocumentation(version: string) {\n      const apis = this.getPluginAndApiInfo();\n      for (const api of apis) {\n        await fs.remove(path.join(this.getApiDocumentationPath(api), version));\n      }\n\n      await fs.remove(path.join(this.getFullDocumentationPath(), version));\n    },\n\n    getPluginAndApiInfo() {\n      const pluginsToDocument = pluginsThatNeedDocumentation.map((plugin) => {\n        return {\n          name: plugin,\n          getter: 'plugin',\n          ctNames: Object.keys(strapi.plugin(plugin).contentTypes),\n        };\n      });\n\n      const apisToDocument = Object.keys(strapi.apis).map((api) => {\n        return {\n          name: api,\n          getter: 'api',\n          ctNames: Object.keys(strapi.api(api).contentTypes),\n        };\n      });\n\n      return [...apisToDocument, ...pluginsToDocument];\n    },\n\n    /**\n     * @description - Creates the Swagger json files\n     */\n    async generateFullDoc(versionOpt?: string) {\n      const version = versionOpt ?? this.getDocumentationVersion();\n\n      const apis = this.getPluginAndApiInfo();\n      const apisThatNeedGeneratedDocumentation = apis.filter(\n        ({ name }) => !overrideService.isEnabled(name)\n      );\n\n      // Initialize the generated documentation with defaults\n      const generatedDocumentation = await produce(config, async (draft) => {\n        if (draft.servers?.length === 0) {\n          // When no servers found set the defaults\n          const serverUrl = strapi.config.get('server.absoluteUrl');\n          const apiPath = strapi.config.get('api.rest.prefix');\n          draft.servers = [\n            {\n              url: `${serverUrl}${apiPath}`,\n              description: 'Development server',\n            },\n          ];\n        }\n\n        if (!draft.components) {\n          draft.components = {};\n        }\n\n        // Set the generated date\n        draft.info['x-generation-date'] = new Date().toISOString();\n        // Set the plugins that need documentation\n        draft['x-strapi-config'].plugins = pluginsThatNeedDocumentation;\n\n        // Delete the mutateDocumentation key from the config so it doesn't end up in the spec\n        delete draft['x-strapi-config'].mutateDocumentation;\n\n        // Generate the documentation for each api and update the generatedDocumentation\n        for (const api of apisThatNeedGeneratedDocumentation) {\n          const newApiPath = builApiEndpointPath(api);\n          const generatedSchemas = buildComponentSchema(api);\n\n          if (generatedSchemas) {\n            draft.components.schemas = { ...draft.components.schemas, ...generatedSchemas };\n          }\n\n          if (newApiPath) {\n            draft.paths = { ...draft.paths, ...newApiPath };\n          }\n        }\n\n        // When overrides are present update the generatedDocumentation\n        if (overrideService.registeredOverrides.length > 0) {\n          overrideService.registeredOverrides.forEach((override: Partial<PluginConfig>) => {\n            // Only run the overrrides when no override version is provided,\n            // or when the generated documentation version matches the override version\n            if (!override?.info?.version || override.info.version === version) {\n              if (override.tags) {\n                // Merge override tags with the generated tags\n                draft.tags = draft.tags || [];\n                draft.tags.push(...override.tags);\n              }\n\n              if (override.paths) {\n                // Merge override paths with the generated paths\n                // The override will add a new path or replace the value of an existing path\n                draft.paths = { ...draft.paths, ...override.paths };\n              }\n\n              if (override.components) {\n                const keys = Object.keys(override.components) as Array<\n                  keyof typeof override.components\n                >;\n\n                keys.forEach((overrideKey) => {\n                  draft.components = draft.components || {};\n\n                  const overrideValue = override.components?.[overrideKey];\n                  const originalValue = draft.components?.[overrideKey];\n\n                  Object.assign(draft.components, {\n                    [overrideKey]: {\n                      ...originalValue,\n                      ...overrideValue,\n                    },\n                  });\n                });\n              }\n            }\n          });\n        }\n      });\n\n      // Escape hatch, allow the user to provide a mutateDocumentation function that can alter any part of\n      // the generated documentation before it is written to the file system\n      const userMutatesDocumentation = config['x-strapi-config'].mutateDocumentation;\n\n      const finalDocumentation = userMutatesDocumentation\n        ? produce(generatedDocumentation, userMutatesDocumentation)\n        : generatedDocumentation;\n\n      // Get the file path for the final documentation\n      const fullDocJsonPath = path.join(\n        this.getFullDocumentationPath(),\n        version,\n        'full_documentation.json'\n      );\n      // Write the documentation to the file system\n      await fs.ensureFile(fullDocJsonPath);\n      await fs.writeJson(fullDocJsonPath, finalDocumentation, { spaces: 2 });\n    },\n  };\n};\n\nexport default createService;\n","import type { Core } from '@strapi/types';\n\nimport { getPluginsThatNeedDocumentation } from './utils/get-plugins-that-need-documentation';\nimport type { PluginConfig } from '../types';\n\nexport type OverrideService = ReturnType<typeof createService>;\n\nconst createService = ({ strapi }: { strapi: Core.Strapi }) => {\n  const registeredOverrides: Partial<PluginConfig>[] = [];\n  const excludedFromGeneration: string[] = [];\n\n  return {\n    registeredOverrides,\n    excludedFromGeneration,\n    /**\n     *\n     * @param {(string | string[])} api - The name of the api or and array of apis to exclude from generation\n     */\n    excludeFromGeneration(api: string | string[]) {\n      if (Array.isArray(api)) {\n        excludedFromGeneration.push(...api);\n\n        return;\n      }\n\n      excludedFromGeneration.push(api);\n    },\n\n    isEnabled(name: string) {\n      return excludedFromGeneration.includes(name);\n    },\n\n    registerOverride(\n      override: Partial<PluginConfig>,\n      opts?: { pluginOrigin: string; excludeFromGeneration?: string[] }\n    ) {\n      const { pluginOrigin, excludeFromGeneration = [] } = opts ?? {};\n\n      const pluginsThatNeedDocumentation = getPluginsThatNeedDocumentation(\n        strapi.config.get('plugin::documentation')\n      );\n      // Don't apply the override if the plugin is not in the list of plugins that need documentation\n      if (pluginOrigin && !pluginsThatNeedDocumentation.includes(pluginOrigin)) return;\n\n      if (excludeFromGeneration.length) {\n        this.excludeFromGeneration(excludeFromGeneration);\n      }\n\n      let overrideToRegister = override;\n      // Parse yaml if we receive a string\n      if (typeof override === 'string') {\n        // eslint-disable-next-line @typescript-eslint/no-var-requires\n        overrideToRegister = require('yaml').parse(overrideToRegister);\n      }\n      // receive an object we can register it directly\n      registeredOverrides.push(overrideToRegister);\n    },\n  };\n};\n\nexport default createService;\n","// import type { Common } from '@strapi/types';\n\nimport documentation, { type DocumentationService } from './documentation';\nimport override, { type OverrideService } from './override';\n\nexport default {\n  documentation,\n  override,\n};\n\nexport type Services = {\n  documentation: DocumentationService;\n  override: OverrideService;\n};\n","import type Koa from 'koa';\nimport type {} from 'koa-session';\n\nimport type { Config } from '../types';\n\nexport default async (ctx: Koa.Context, next: Koa.Next) => {\n  const pluginStore = strapi.store({ type: 'plugin', name: 'documentation' });\n\n  const config = (await pluginStore.get({ key: 'config' })) as Config;\n\n  if (!config.restrictedAccess) {\n    return next();\n  }\n\n  if (!ctx.session || !ctx.session.documentation || !ctx.session.documentation.logged) {\n    const querystring = ctx.querystring ? `?${ctx.querystring}` : '';\n\n    return ctx.redirect(`${strapi.config.server.url}/documentation/login${querystring}`);\n  }\n\n  // Execute the action.\n  return next();\n};\n","import restrictAccess from '../middlewares/restrict-access';\n\nexport default [\n  {\n    method: 'GET',\n    path: '/',\n    handler: 'documentation.index',\n    config: {\n      auth: false,\n      middlewares: [restrictAccess],\n    },\n  },\n  {\n    method: 'GET',\n    path: '/v:major(\\\\d+).:minor(\\\\d+).:patch(\\\\d+)',\n    handler: 'documentation.index',\n    config: {\n      auth: false,\n      middlewares: [restrictAccess],\n    },\n  },\n  {\n    method: 'GET',\n    path: '/login',\n    handler: 'documentation.loginView',\n    config: {\n      auth: false,\n    },\n  },\n  {\n    method: 'POST',\n    path: '/login',\n    handler: 'documentation.login',\n    config: {\n      auth: false,\n    },\n  },\n  {\n    method: 'GET',\n    path: '/getInfos',\n    handler: 'documentation.getInfos',\n    config: {\n      policies: [\n        { name: 'admin::hasPermissions', config: { actions: ['plugin::documentation.read'] } },\n      ],\n    },\n  },\n  {\n    method: 'POST',\n    path: '/regenerateDoc',\n    handler: 'documentation.regenerateDoc',\n    config: {\n      policies: [\n        {\n          name: 'admin::hasPermissions',\n          config: { actions: ['plugin::documentation.settings.regenerate'] },\n        },\n      ],\n    },\n  },\n  {\n    method: 'PUT',\n    path: '/updateSettings',\n    handler: 'documentation.updateSettings',\n    config: {\n      policies: [\n        {\n          name: 'admin::hasPermissions',\n          config: { actions: ['plugin::documentation.settings.update'] },\n        },\n      ],\n    },\n  },\n  {\n    method: 'DELETE',\n    path: '/deleteDoc/:version',\n    handler: 'documentation.deleteDoc',\n    config: {\n      policies: [],\n    },\n  },\n];\n","import path from 'path';\nimport bcrypt from 'bcryptjs';\nimport fs from 'fs-extra';\nimport _ from 'lodash';\nimport koaStatic from 'koa-static';\nimport { yup, validateYupSchema } from '@strapi/utils';\n\nimport type Koa from 'koa';\nimport type {} from 'koa-body';\n\nimport { getService } from '../utils';\nimport type { Config } from '../types';\n\nconst validation = {\n  validateSettings: validateYupSchema(\n    yup.object().shape({\n      restrictedAccess: yup.boolean(),\n      password: yup\n        .string()\n        .min(8)\n        .matches(/[a-z]/, '${path} must contain at least one lowercase character')\n        .matches(/[A-Z]/, '${path} must contain at least one uppercase character')\n        .matches(/\\d/, '${path} must contain at least one number')\n        .when('restrictedAccess', (value, initSchema) => {\n          return value ? initSchema.required('password is required') : initSchema;\n        }),\n    })\n  ),\n};\n\nexport default {\n  async getInfos(ctx: Koa.Context) {\n    try {\n      const docService = getService('documentation');\n      const docVersions = docService.getDocumentationVersions();\n      const documentationAccess = await docService.getDocumentationAccess();\n\n      ctx.send({\n        docVersions,\n        currentVersion: docService.getDocumentationVersion(),\n        prefix: '/documentation',\n        documentationAccess,\n      });\n    } catch (err) {\n      strapi.log.error(err);\n      ctx.badRequest();\n    }\n  },\n\n  async index(ctx: Koa.Context, next: Koa.Next) {\n    try {\n      /**\n       * We don't expose the specs using koa-static or something else due to security reasons.\n       * That's why, we need to read the file localy and send the specs through it when we serve the Swagger UI.\n       */\n      const { major, minor, patch } = ctx.params;\n      const version =\n        major && minor && patch\n          ? `${major}.${minor}.${patch}`\n          : getService('documentation').getDocumentationVersion();\n\n      const openAPISpecsPath = path.join(\n        strapi.dirs.app.extensions,\n        'documentation',\n        'documentation',\n        version,\n        'full_documentation.json'\n      );\n\n      try {\n        const documentation = fs.readFileSync(openAPISpecsPath, 'utf8');\n\n        const layout = (await import('../public/index.html')).default;\n\n        const filledLayout = _.template(layout)({\n          backendUrl: strapi.config.server.url,\n          spec: JSON.stringify(JSON.parse(documentation)),\n        });\n\n        try {\n          const layoutPath = path.resolve(\n            strapi.dirs.app.extensions,\n            'documentation',\n            'public',\n            'index.html'\n          );\n          await fs.ensureFile(layoutPath);\n          await fs.writeFile(layoutPath, filledLayout);\n\n          // Serve the file.\n          ctx.url = path.basename(`${ctx.url}/index.html`);\n\n          try {\n            const staticFolder = path.resolve(\n              strapi.dirs.app.extensions,\n              'documentation',\n              'public'\n            );\n            return koaStatic(staticFolder)(ctx, next);\n          } catch (e) {\n            strapi.log.error(e);\n          }\n        } catch (e) {\n          strapi.log.error(e);\n        }\n      } catch (e) {\n        strapi.log.error(e);\n      }\n    } catch (e) {\n      strapi.log.error(e);\n    }\n  },\n\n  async loginView(ctx: Koa.Context, next: Koa.Next) {\n    // lazy require cheerio\n    // eslint-disable-next-line @typescript-eslint/no-var-requires\n    const cheerio = require('cheerio');\n\n    const { error } = ctx.query;\n\n    try {\n      const layout = (await import('../public/login.html')).default;\n\n      const filledLayout = _.template(layout.toString())({\n        actionUrl: `${strapi.config.server.url}/documentation/login`,\n      });\n\n      const $ = cheerio.load(filledLayout);\n\n      $('.error').text(_.isEmpty(error) ? '' : 'Wrong password...');\n\n      try {\n        const layoutPath = path.resolve(\n          strapi.dirs.app.extensions,\n          'documentation',\n          'public',\n          'login.html'\n        );\n        await fs.ensureFile(layoutPath);\n        await fs.writeFile(layoutPath, $.html());\n\n        ctx.url = path.basename(`${ctx.url}/login.html`);\n\n        try {\n          const staticFolder = path.resolve(strapi.dirs.app.extensions, 'documentation', 'public');\n          return koaStatic(staticFolder)(ctx, next);\n        } catch (e) {\n          strapi.log.error(e);\n        }\n      } catch (e) {\n        strapi.log.error(e);\n      }\n    } catch (e) {\n      strapi.log.error(e);\n    }\n  },\n\n  async login(ctx: Koa.Context) {\n    const {\n      body: { password },\n    } = ctx.request;\n\n    const { password: hash } = (await strapi\n      .store({ type: 'plugin', name: 'documentation', key: 'config' })\n      .get()) as { password: string };\n\n    const isValid = await bcrypt.compare(password, hash);\n\n    let querystring = '?error=password';\n\n    if (isValid && ctx.session) {\n      ctx.session.documentation = {\n        logged: true,\n      };\n\n      querystring = '';\n    }\n\n    ctx.redirect(`${strapi.config.server.url}/documentation${querystring}`);\n  },\n\n  async regenerateDoc(ctx: Koa.Context) {\n    const { version } = ctx.request.body;\n\n    const service = getService('documentation');\n\n    const documentationVersions = service.getDocumentationVersions().map((el) => el.version);\n\n    if (_.isEmpty(version)) {\n      return ctx.badRequest('Please provide a version.');\n    }\n\n    if (!documentationVersions.includes(version)) {\n      return ctx.badRequest('The version you are trying to generate does not exist.');\n    }\n\n    try {\n      strapi.reload.isWatching = false;\n      await service.generateFullDoc(version);\n      ctx.send({ ok: true });\n    } finally {\n      strapi.reload.isWatching = true;\n    }\n  },\n\n  async deleteDoc(ctx: Koa.Context) {\n    const { version } = ctx.params;\n\n    const service = getService('documentation');\n\n    const documentationVersions = service.getDocumentationVersions().map((el) => el.version);\n\n    if (_.isEmpty(version)) {\n      return ctx.badRequest('Please provide a version.');\n    }\n\n    if (!documentationVersions.includes(version)) {\n      return ctx.badRequest('The version you are trying to delete does not exist.');\n    }\n\n    try {\n      strapi.reload.isWatching = false;\n      await service.deleteDocumentation(version);\n      ctx.send({ ok: true });\n    } finally {\n      strapi.reload.isWatching = true;\n    }\n  },\n\n  async updateSettings(ctx: Koa.Context) {\n    const pluginStore = strapi.store({ type: 'plugin', name: 'documentation' });\n\n    const data = await validation.validateSettings(ctx.request.body);\n\n    const config: Config = {\n      restrictedAccess: Boolean(data.restrictedAccess),\n    };\n\n    if (data.password) {\n      config.password = await bcrypt.hash(data.password, 10);\n    }\n\n    await pluginStore.set({ key: 'config', value: config });\n\n    return ctx.send({ ok: true });\n  },\n};\n","import documentation from './documentation';\n\nexport default {\n  documentation,\n};\n","import type { PluginConfig } from '../types';\n\nexport const defaultConfig: PluginConfig = {\n  openapi: '3.0.0',\n  info: {\n    version: '1.0.0',\n    title: 'DOCUMENTATION',\n    description: '',\n    termsOfService: 'YOUR_TERMS_OF_SERVICE_URL',\n    contact: {\n      name: 'TEAM',\n      email: 'contact-email@something.io',\n      url: 'mywebsite.io',\n    },\n    license: {\n      name: 'Apache 2.0',\n      url: 'https://www.apache.org/licenses/LICENSE-2.0.html',\n    },\n  },\n  'x-strapi-config': {\n    plugins: null,\n    mutateDocumentation: null,\n  },\n  servers: [],\n  externalDocs: {\n    description: 'Find out more',\n    url: 'https://docs.strapi.io/developer-docs/latest/getting-started/introduction.html',\n  },\n  security: [\n    {\n      bearerAuth: [],\n    },\n  ],\n  paths: {},\n  components: {\n    securitySchemes: {\n      bearerAuth: {\n        type: 'http',\n        scheme: 'bearer',\n        bearerFormat: 'JWT',\n      },\n    },\n    schemas: {\n      Error: {\n        type: 'object',\n        required: ['error'],\n        properties: {\n          data: {\n            nullable: true,\n            oneOf: [{ type: 'object' }, { type: 'array', items: { type: 'object' } }],\n          },\n          error: {\n            type: 'object',\n            properties: {\n              status: {\n                type: 'integer',\n              },\n              name: {\n                type: 'string',\n              },\n              message: {\n                type: 'string',\n              },\n              details: {\n                type: 'object',\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n};\n","import { defaultConfig } from './default-plugin-config';\n\nexport const config = {\n  default: defaultConfig,\n};\n","import { bootstrap } from './bootstrap';\nimport { register } from './register';\nimport services from './services';\nimport routes from './routes';\nimport controllers from './controllers';\nimport { config } from './config';\n\nexport default {\n  bootstrap,\n  config,\n  routes,\n  controllers,\n  register,\n  services,\n};\n"],"names":["getService","name","strapi","global","plugin","service","RBAC_ACTIONS","section","displayName","uid","pluginName","category","bootstrap","actionProvider","registerMany","pluginStore","store","environment","type","config","get","key","set","value","restrictedAccess","process","env","NODE_ENV","generateFullDoc","addDocumentMiddlewares","server","routes","method","path","handler","ctx","next","url","basename","koaStatic","swaggerUi","getAbsoluteFSPath","maxage","defer","auth","register","pascalCase","string","_","upperFirst","camelCase","params","in","description","deprecated","required","schema","additionalProperties","style","loopContentTypeNames","api","callback","result","contentTypeName","ctNames","getter","attributes","info","contentTypeInfo","kind","contentType","routeInfo","apiName","uniqueName","apiInfo","getApiResponse","route","isListOfEntities","getSchema","format","$ref","content","hasFindMethod","split","pop","parsePathWithVariables","routePath","tokens","pathToRegexp","parse","map","token","t","join","Error","getPathParams","reduce","acc","param","push","getPathWithPrefix","prefix","has","concat","getPaths","contentTypeRoutes","filter","includes","pluralName","singularName","paths","methodVerb","toLowerCase","hasPathParams","pathWithPrefix","responses","getApiResponses","swaggerConfig","tags","parameters","operationId","queryParams","pathParams","refName","requestBody","buildApiEndpointPath","items","properties","id","documentId","convertComponentName","component","isRef","cleanComponentName","cleanSchemaAttributes","typeMap","Map","isRequest","didAddStrapiComponentsToSchemas","schemaAttributes","prop","Object","keys","attribute","example","Date","now","enum","pattern","componentAttributes","components","rawComponentSchema","refComponentSchema","componentExists","finalComponentSchema","repeatable","__component","discriminator","every","hasOwn","propertyName","mapping","anyOf","imageAttributes","multiple","oneOfType","oneOf","getSchemaData","relation","target","targetAttributes","getRequiredAttributes","allAttributes","requiredAttributes","getAllSchemasForContentType","strapiComponentSchemas","schemas","typeName","schemaName","routeMethods","attributesToOmit","attributesForRequest","omit","requiredRequestAttributes","assign","data","length","hasListOfEntities","meta","pagination","page","pageSize","minimum","pageCount","maximum","total","buildComponentSchema","getPluginsThatNeedDocumentation","defaultPlugins","userPluginsConfig","plugins","createService","pluginsThatNeedDocumentation","overrideService","getDocumentationVersion","version","getFullDocumentationPath","dirs","app","extensions","getDocumentationVersions","fs","readdirSync","filePath","resolve","doc","JSON","readFileSync","toString","generatedDate","err","x","getDocumentationAccess","getApiDocumentationPath","deleteDocumentation","apis","getPluginAndApiInfo","remove","pluginsToDocument","contentTypes","apisToDocument","versionOpt","apisThatNeedGeneratedDocumentation","isEnabled","generatedDocumentation","produce","draft","servers","serverUrl","apiPath","toISOString","mutateDocumentation","newApiPath","builApiEndpointPath","generatedSchemas","registeredOverrides","forEach","override","overrideKey","overrideValue","originalValue","userMutatesDocumentation","finalDocumentation","fullDocJsonPath","ensureFile","writeJson","spaces","excludedFromGeneration","excludeFromGeneration","Array","isArray","registerOverride","opts","pluginOrigin","overrideToRegister","require","documentation","session","logged","querystring","redirect","middlewares","restrictAccess","policies","actions","validation","validateSettings","validateYupSchema","yup","object","shape","boolean","password","min","matches","when","initSchema","getInfos","docService","docVersions","documentationAccess","send","currentVersion","log","error","badRequest","index","major","minor","patch","openAPISpecsPath","layout","default","filledLayout","template","backendUrl","spec","stringify","layoutPath","writeFile","staticFolder","e","loginView","cheerio","query","actionUrl","$","load","text","isEmpty","html","login","body","request","hash","isValid","bcrypt","compare","regenerateDoc","documentationVersions","el","reload","isWatching","ok","deleteDoc","updateSettings","Boolean","defaultConfig","openapi","title","termsOfService","contact","email","license","externalDocs","security","bearerAuth","securitySchemes","scheme","bearerFormat","nullable","status","message","details","controllers","services"],"mappings":"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"}