'use strict';

var icons = require('@strapi/icons');

const PERMISSIONS = {
    // This permission regards the main component (App) and is used to tell
    // If the plugin link should be displayed in the menu
    // And also if the plugin is accessible. This use case is found when a user types the url of the
    // plugin directly in the browser
    main: [
        {
            action: 'plugin::documentation.read',
            subject: null
        },
        {
            action: 'plugin::documentation.settings.regenerate',
            subject: null
        },
        {
            action: 'plugin::documentation.settings.update',
            subject: null
        }
    ],
    open: [
        {
            action: 'plugin::documentation.read',
            subject: null
        },
        {
            action: 'plugin::documentation.settings.regenerate',
            subject: null
        }
    ],
    regenerate: [
        {
            action: 'plugin::documentation.settings.regenerate',
            subject: null
        }
    ],
    update: [
        {
            action: 'plugin::documentation.settings.update',
            subject: null
        }
    ]
};

const pluginId = 'documentation';

const prefixPluginTranslations = (trad, pluginId)=>{
    return Object.keys(trad).reduce((acc, current)=>{
        acc[`${pluginId}.${current}`] = trad[current];
        return acc;
    }, {});
};

function __variableDynamicImportRuntime2__(path) {
  switch (path) {
    case './translations/ar.json': return Promise.resolve().then(function () { return require('./ar-Dix6VU4a.js'); });
    case './translations/cs.json': return Promise.resolve().then(function () { return require('./cs-C6k-mH5i.js'); });
    case './translations/de.json': return Promise.resolve().then(function () { return require('./de-DYskRe8j.js'); });
    case './translations/dk.json': return Promise.resolve().then(function () { return require('./dk-BYJqzR_M.js'); });
    case './translations/en.json': return Promise.resolve().then(function () { return require('./en-B90IBmYB.js'); });
    case './translations/es.json': return Promise.resolve().then(function () { return require('./es-5WsjlhIl.js'); });
    case './translations/fr.json': return Promise.resolve().then(function () { return require('./fr-C-vHEudQ.js'); });
    case './translations/id.json': return Promise.resolve().then(function () { return require('./id-BKiCYOdS.js'); });
    case './translations/it.json': return Promise.resolve().then(function () { return require('./it-B7SnHLP2.js'); });
    case './translations/ko.json': return Promise.resolve().then(function () { return require('./ko-CjOasZmz.js'); });
    case './translations/ms.json': return Promise.resolve().then(function () { return require('./ms-C2TEZHkD.js'); });
    case './translations/nl.json': return Promise.resolve().then(function () { return require('./nl-CLp2dhr9.js'); });
    case './translations/pl.json': return Promise.resolve().then(function () { return require('./pl-C8WRO2pt.js'); });
    case './translations/pt-BR.json': return Promise.resolve().then(function () { return require('./pt-BR-Ds-dLXzD.js'); });
    case './translations/pt.json': return Promise.resolve().then(function () { return require('./pt-DL-rrjA1.js'); });
    case './translations/ru.json': return Promise.resolve().then(function () { return require('./ru-Cqv4k9my.js'); });
    case './translations/sk.json': return Promise.resolve().then(function () { return require('./sk-D6l_EMOT.js'); });
    case './translations/sv.json': return Promise.resolve().then(function () { return require('./sv-Xg5gbVO9.js'); });
    case './translations/th.json': return Promise.resolve().then(function () { return require('./th-Pci1U3n6.js'); });
    case './translations/tr.json': return Promise.resolve().then(function () { return require('./tr-CBlxk5Of.js'); });
    case './translations/uk.json': return Promise.resolve().then(function () { return require('./uk-CBFYJeOD.js'); });
    case './translations/vi.json': return Promise.resolve().then(function () { return require('./vi-CAG7iDHR.js'); });
    case './translations/zh-Hans.json': return Promise.resolve().then(function () { return require('./zh-Hans-CtXQdJhw.js'); });
    case './translations/zh.json': return Promise.resolve().then(function () { return require('./zh-rKHsKNA3.js'); });
    default: return new Promise(function(resolve, reject) {
      (typeof queueMicrotask === 'function' ? queueMicrotask : setTimeout)(
        reject.bind(null, new Error("Unknown variable dynamic import: " + path))
      );
    })
   }
 }
// eslint-disable-next-line import/no-default-export
var index = {
    register (app) {
        app.addMenuLink({
            to: `plugins/${pluginId}`,
            icon: icons.Information,
            intlLabel: {
                id: `${pluginId}.plugin.name`,
                defaultMessage: 'Documentation'
            },
            permissions: PERMISSIONS.main,
            Component: async ()=>{
                const { App } = await Promise.resolve().then(function () { return require('./App-Cxz0rk7X.js'); });
                return App;
            },
            position: 9
        });
        app.registerPlugin({
            id: pluginId,
            name: pluginId
        });
    },
    bootstrap (app) {
        app.addSettingsLink('global', {
            intlLabel: {
                id: `${pluginId}.plugin.name`,
                defaultMessage: 'Documentation'
            },
            id: 'documentation',
            to: pluginId,
            Component: async ()=>{
                const { SettingsPage } = await Promise.resolve().then(function () { return require('./Settings-BSdFg_W6.js'); });
                return SettingsPage;
            },
            permissions: PERMISSIONS.main
        });
    },
    async registerTrads ({ locales }) {
        const importedTrads = await Promise.all(locales.map((locale)=>{
            return __variableDynamicImportRuntime2__(`./translations/${locale}.json`).then(({ default: data })=>{
                return {
                    data: prefixPluginTranslations(data, pluginId),
                    locale
                };
            }).catch(()=>{
                return {
                    data: {},
                    locale
                };
            });
        }));
        return Promise.resolve(importedTrads);
    }
};

exports.PERMISSIONS = PERMISSIONS;
exports.index = index;
exports.pluginId = pluginId;
//# sourceMappingURL=index-BBrYAkKJ.js.map
