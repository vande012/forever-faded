import { Information } from '@strapi/icons';

const PERMISSIONS = {
    // This permission regards the main component (App) and is used to tell
    // If the plugin link should be displayed in the menu
    // And also if the plugin is accessible. This use case is found when a user types the url of the
    // plugin directly in the browser
    main: [
        {
            action: 'plugin::documentation.read',
            subject: null
        },
        {
            action: 'plugin::documentation.settings.regenerate',
            subject: null
        },
        {
            action: 'plugin::documentation.settings.update',
            subject: null
        }
    ],
    open: [
        {
            action: 'plugin::documentation.read',
            subject: null
        },
        {
            action: 'plugin::documentation.settings.regenerate',
            subject: null
        }
    ],
    regenerate: [
        {
            action: 'plugin::documentation.settings.regenerate',
            subject: null
        }
    ],
    update: [
        {
            action: 'plugin::documentation.settings.update',
            subject: null
        }
    ]
};

const pluginId = 'documentation';

const prefixPluginTranslations = (trad, pluginId)=>{
    return Object.keys(trad).reduce((acc, current)=>{
        acc[`${pluginId}.${current}`] = trad[current];
        return acc;
    }, {});
};

function __variableDynamicImportRuntime2__(path) {
  switch (path) {
    case './translations/ar.json': return import('./ar-Bu09tPI1.mjs');
    case './translations/cs.json': return import('./cs-tf-UeGst.mjs');
    case './translations/de.json': return import('./de-CMhqnPQP.mjs');
    case './translations/dk.json': return import('./dk-BmQOOeIc.mjs');
    case './translations/en.json': return import('./en-Cx8yPuig.mjs');
    case './translations/es.json': return import('./es-DAdgO3Ey.mjs');
    case './translations/fr.json': return import('./fr-B5fjFqKX.mjs');
    case './translations/id.json': return import('./id-CLApXj97.mjs');
    case './translations/it.json': return import('./it-C7GcWYBa.mjs');
    case './translations/ko.json': return import('./ko-DZvks90a.mjs');
    case './translations/ms.json': return import('./ms-Df9gDB9M.mjs');
    case './translations/nl.json': return import('./nl-BlmTMaTL.mjs');
    case './translations/pl.json': return import('./pl-5iT3b9r4.mjs');
    case './translations/pt-BR.json': return import('./pt-BR-De5jokla.mjs');
    case './translations/pt.json': return import('./pt-BK5YbXpM.mjs');
    case './translations/ru.json': return import('./ru-C_16WuLP.mjs');
    case './translations/sk.json': return import('./sk-B7RadPe4.mjs');
    case './translations/sv.json': return import('./sv-DK5DOsrV.mjs');
    case './translations/th.json': return import('./th-DNiRgKQH.mjs');
    case './translations/tr.json': return import('./tr-CWX4cUiB.mjs');
    case './translations/uk.json': return import('./uk-BEfALDlr.mjs');
    case './translations/vi.json': return import('./vi-geadDLtq.mjs');
    case './translations/zh-Hans.json': return import('./zh-Hans-fcRf-TLx.mjs');
    case './translations/zh.json': return import('./zh-E4LX--2j.mjs');
    default: return new Promise(function(resolve, reject) {
      (typeof queueMicrotask === 'function' ? queueMicrotask : setTimeout)(
        reject.bind(null, new Error("Unknown variable dynamic import: " + path))
      );
    })
   }
 }
// eslint-disable-next-line import/no-default-export
var index = {
    register (app) {
        app.addMenuLink({
            to: `plugins/${pluginId}`,
            icon: Information,
            intlLabel: {
                id: `${pluginId}.plugin.name`,
                defaultMessage: 'Documentation'
            },
            permissions: PERMISSIONS.main,
            Component: async ()=>{
                const { App } = await import('./App-RCDQlkkW.mjs');
                return App;
            },
            position: 9
        });
        app.registerPlugin({
            id: pluginId,
            name: pluginId
        });
    },
    bootstrap (app) {
        app.addSettingsLink('global', {
            intlLabel: {
                id: `${pluginId}.plugin.name`,
                defaultMessage: 'Documentation'
            },
            id: 'documentation',
            to: pluginId,
            Component: async ()=>{
                const { SettingsPage } = await import('./Settings-BVMaCS19.mjs');
                return SettingsPage;
            },
            permissions: PERMISSIONS.main
        });
    },
    async registerTrads ({ locales }) {
        const importedTrads = await Promise.all(locales.map((locale)=>{
            return __variableDynamicImportRuntime2__(`./translations/${locale}.json`).then(({ default: data })=>{
                return {
                    data: prefixPluginTranslations(data, pluginId),
                    locale
                };
            }).catch(()=>{
                return {
                    data: {},
                    locale
                };
            });
        }));
        return Promise.resolve(importedTrads);
    }
};

export { PERMISSIONS as P, index as i, pluginId as p };
//# sourceMappingURL=index-Bqh49AYj.mjs.map
